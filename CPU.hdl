// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
 CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Parts declarations and connections go here.

    // Split the instruction into its components
    Not(in=instruction[15], out=isAinstruction);
    And(a=instruction[15], b=true, out=isCinstruction);

    // Handling A-instruction
    Mux16(a=outA, b=instruction, sel=isAinstruction, out=aOut);
    Register(in=aOut, load=isAinstruction, out=outA);
    
    // Handling C-instruction
    And(a=instruction[15], b=true, out=isCinst);
    And(a=instruction[12], b=isCinst, out=aM);
    
    // Select the correct ALU inputs
    Mux16(a=outA, b=inM, sel=aM, out=aluY);
    ALU(x=dRegisterOut, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zero, ng=negative);
    
    // Load A Register
    Or(a=instruction[5], b=isAinstruction, out=loadA);
    Register(in=aluOut, load=loadA, out=outA);
    
    // Load D Register
    And(a=instruction[4], b=isCinst, out=loadD);
    Register(in=aluOut, load=loadD, out=dRegisterOut);
    
    // Handling PC
    And(a=isCinstruction, b=instruction[2], out=jumpLess);
    And(a=isCinstruction, b=instruction[1], out=jumpEqual);
    And(a=isCinstruction, b=instruction[0], out=jumpGreater);
    
    // Jump Logic
    Or(a=zero, b=negative, out=lessOrEqual);
    Or(a=jumpEqual, b=jumpLess, out=jumpLE);
    Or(a=jumpGreater, b=jumpLE, out=jumpAny);
    Mux16(a=outA, b=pcOut, sel=jumpAny, out=nextPC);
    
    // Program Counter
    PC(in=nextPC, load=jumpAny, inc=true, reset=reset, out=pcOut);
    
    // Outputs
    Mux16(a=outA, b=aluOut, sel=writeM, out=outM);
    Or(a=instruction[3], b=isCinst, out=writeM);
    Mux16(a=outA, b=pcOut, sel=isCinstruction, out=addressM);
    Mux16(a=outA, b=pcOut, sel=isCinstruction, out=pc);
}
